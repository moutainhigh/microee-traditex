{"version":3,"sources":["serviceWorker.js","Store/trads-store/TradsStore.js","SitePages/index/IndexPage.js","index.js"],"names":["Boolean","window","location","hostname","match","done","HttpWrapper","create","method","url","data","headers","then","res","type","currency","queryString","stringify","sort","action","moment","Fake","_l","jQuery","the_topics","_IndexPage","props","state","accountDiskBalance","accountSolrBalance","httpNetworkLogger","speed","max","min","items","topicObject","arr","Object","entries","value","push","TradsStore","getPricing","result","code","setState","oanda","theTopics","getTopicValues","theTopicsDef","console","log","this","queryAccountBalance","diskAccountBalance","_btcBalance","filter","m","_btcBalanceTrad","_btcBalanceFrozen","_jpyBalance","_jpyBalanceTrad","_jpyBalanceFrozen","btcBalance","tradeBalance","length","parseFloat","balance","frozenBalance","jpyBalance","btcBalances","rate","toFixed","jpyBalances","accountDiskBalancesBTC","accountDiskBalancesJPY","_usdtBalance","_usdtBalanceTrad","_usdtBalanceFrozen","usdtBalance","usdtBalances","accountSolrBalancesBTC","accountSolrBalancesUSDT","getAccountBalances","processDiskAccountBalance","processSolrAccountBalance","message","topic","timer","orderbook","pricing","diskorders","accountBalance","diskAccount","solrAccount","revokeorder","httplog","_httpnetworkLogger","_speed","_max","_min","_items","slice","_revokeCount","JSON","parse","_diskorders","key","order","orderId","revokeCount","_accountBalance","_balanceList","list","b","_currency","processDiskOrders","_message","symbol","asks","bids","serverTimer","format","distOrderParam","pick","side","amount","price","orderBy","map","item","i","f","className","start","toUpperCase","URL","id","style","color","fontWeight","textAlign","getHttpNetworkSection","instrument","sell","buy","getOrderBookAsksSection","getOrderBookBidsSection","getDiskOrdersAsksSection","getDiskOrdersBidsSection","topics","onMessage","msg","_topic","onWebSocketMessage","ref","client","clientRef","val","httpnetwork","Component","mixin","css","IndexPage","styled","SliderComponent","exact","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { action } from 'mobx';\nimport { HttpWrapper } from 'reack-lang';\nimport queryString from 'query-string';\n\nexport class TradsStore {\n\n    @action getPricing(done) {\n        HttpWrapper.create()({\n            method: 'get',\n            url: '/trads/getPricing',\n            data: null,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(function (res) {\n            done(res.data);\n        });\n    }\n\n    @action getBalances(type, currency, done) {\n        HttpWrapper.create()({\n            method: 'get',\n            url: '/trads/getBalances?' + queryString.stringify({type: type, currency: currency}, {sort: false}),\n            data: null,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(function (res) {\n            done(res.data);\n        });\n    }\n\n    @action getAccountBalances(type, currency, done) {\n        HttpWrapper.create()({\n            method: 'get',\n            url: '/trads/getAccountBalances?' + queryString.stringify({type: type, currency: currency}, {sort: false}),\n            data: null,\n            headers: {\n                'Content-Type': 'application/json'\n            }\n        }).then(function (res) {\n            done(res.data);\n        });\n    }\n\n}\n\nexport default new TradsStore();\n","import React, { Component } from 'react';\nimport styled, { css } from \"styled-components\";\nimport { Fake } from 'reack-fake';\nimport SockJsClient from 'react-stomp';\n\nimport TradsStore from \"__store/trads-store/TradsStore\";\n\nconst moment = Fake('moment');\nconst _l = Fake('_');\nconst jQuery = Fake('jQuery');\n\nconst the_topics = {\n      timer: '/topic/timer', \n      pricing: '/topic/__traditex.message.pricing', \n      orderbook: '/topic/__traditex.message.orderbook', \n      diskorders: '/topic/__traditex.message.diskorders', \n      httpnetwork: '/topic/__traditex.message.httpnetwork',\n      httplog: '/topic/__traditex.message.httplog.listener',\n      revokeorder: '/topic/__traditex.message.revokeorder.count',\n      accountBalance: '/topic/__traditex.message.account.balance',\n      diskAccount: '/topic/__traditex.message.disk-account.balancess',\n      solrAccount: '/topic/__traditex.message.solr-account.balancess'\n};\n\nexport class _IndexPage extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n          accountDiskBalance: {\n\n          },\n          accountSolrBalance: {\n\n          },\n          httpNetworkLogger: {\n            speed: 0,\n            max: 0,\n            min: 0,\n            items: []\n          }\n        };\n    }\n\n  static getDerivedStateFromProps(props, state) {\n      return {\n        ...state,\n        theTopicsDef: {\n              timer: the_topics.timer, \n              pricing: jQuery('#topic_pricing').val() ? jQuery('#topic_pricing').val() : the_topics.pricing, \n              orderbook: jQuery('#topic_orderbook').val() ? jQuery('#topic_orderbook').val() : the_topics.orderbook, \n              diskorders: jQuery('#topic_diskorders').val() ? jQuery('#topic_diskorders').val() : the_topics.diskorders, \n              httpnetwork: jQuery('#topic_httpnetwork').val() ? jQuery('#topic_httpnetwork').val() : the_topics.httpnetwork,\n              httplog: jQuery('#topic_httplog').val() ? jQuery('#topic_httplog').val() : the_topics.httplog,\n              revokeorder: jQuery('#topic_revokeorder').val() ? jQuery('#topic_revokeorder').val() : the_topics.revokeorder,\n              accountBalance: jQuery('#topic_accountBalance').val() ? jQuery('#topic_accountBalance').val() : the_topics.accountBalance,\n              diskAccount: jQuery('#topic_diskAccount').val() ? jQuery('#topic_diskAccount').val() : the_topics.diskAccount,\n              solrAccount: jQuery('#topic_solrAccount').val() ? jQuery('#topic_solrAccount').val() : the_topics.solrAccount\n        }\n      };\n  }\n\n    getTopicValues(topicObject) {\n      let arr = [];\n      for (const [key, value] of Object.entries(topicObject)) {\n        arr.push(value);\n      }\n      return arr;\n    }\n\n    componentDidMount() {\n      TradsStore.getPricing((result) => {\n        if (result.code === 200 || result.code === 201) {\n          this.setState({\n            ...this.state,\n            oanda: result.data[0],\n            theTopics: this.getTopicValues(this.state.theTopicsDef)\n          }, () => {\n            console.log(this.state.theTopicsDef, 'theTopics')\n          });\n        }\n      });\n      this.queryAccountBalance();\n    }\n\n    processDiskAccountBalance(diskAccountBalance) {\n      let _btcBalance = diskAccountBalance.filter(m => m.currency === 'btc');\n      let _btcBalanceTrad = _btcBalance.filter(m => m.type === 'trade');\n      let _btcBalanceFrozen = _btcBalance.filter(m => m.type === 'frozen');\n      let _jpyBalance = diskAccountBalance.filter(m => m.currency === 'jpy');\n      let _jpyBalanceTrad = _jpyBalance.filter(m => m.type === 'trade');\n      let _jpyBalanceFrozen = _jpyBalance.filter(m => m.type === 'frozen');\n      let btcBalance = { tradeBalance: _btcBalanceTrad.length > 0 ? parseFloat(_btcBalanceTrad[0].balance): 0.0, frozenBalance: _btcBalanceFrozen.length > 0 ? parseFloat(_btcBalanceFrozen[0].balance) : 0.0 };\n      let jpyBalance = { tradeBalance: _jpyBalanceTrad.length > 0 ? parseFloat(_jpyBalanceTrad[0].balance): 0.0, frozenBalance: _jpyBalanceFrozen.length > 0 ? parseFloat(_jpyBalanceFrozen[0].balance) : 0.0 };\n      let btcBalances = {\n        ...btcBalance,\n        rate: ((btcBalance.frozenBalance / btcBalance.tradeBalance) * 100).toFixed(4) + '%'\n      }\n      let jpyBalances = {\n        ...jpyBalance,\n        rate: ((jpyBalance.frozenBalance / jpyBalance.tradeBalance) * 100).toFixed(4) + '%'\n      }\n      this.setState({\n        ...this.state,\n        accountDiskBalancesBTC: btcBalances,\n        accountDiskBalancesJPY: jpyBalances\n      });\n    }\n\n    processSolrAccountBalance(diskAccountBalance) {\n      let _btcBalance = diskAccountBalance.filter(m => m.currency === 'btc');\n      let _btcBalanceTrad = _btcBalance.filter(m => m.type === 'trade');\n      let _btcBalanceFrozen = _btcBalance.filter(m => m.type === 'frozen');\n      let _usdtBalance = diskAccountBalance.filter(m => m.currency === 'usdt');\n      let _usdtBalanceTrad = _usdtBalance.filter(m => m.type === 'trade');\n      let _usdtBalanceFrozen = _usdtBalance.filter(m => m.type === 'frozen');\n      let btcBalance = { tradeBalance: _btcBalanceTrad.length > 0 ? parseFloat(_btcBalanceTrad[0].balance): 0.0, frozenBalance: _btcBalanceFrozen.length > 0 ? parseFloat(_btcBalanceFrozen[0].balance) : 0.0 };\n      let usdtBalance = { tradeBalance: _usdtBalanceTrad.length > 0 ? parseFloat(_usdtBalanceTrad[0].balance): 0.0, frozenBalance: _usdtBalanceFrozen.length > 0 ? parseFloat(_usdtBalanceFrozen[0].balance) : 0.0 };\n      let btcBalances = {\n        ...btcBalance,\n        rate: ((btcBalance.frozenBalance / btcBalance.tradeBalance) * 100).toFixed(4) + '%'\n      }\n      let usdtBalances = {\n        ...usdtBalance,\n        rate: ((usdtBalance.frozenBalance / usdtBalance.tradeBalance) * 100).toFixed(4) + '%'\n      }\n      this.setState({\n        ...this.state,\n        accountSolrBalancesBTC: btcBalances,\n        accountSolrBalancesUSDT: usdtBalances\n      });\n    }\n\n    queryAccountBalance() {\n      \n      TradsStore.getAccountBalances('disk', ['btc', 'jpy'], (result) => {\n        if (result.code === 200 || result.code === 201) {\n          this.processDiskAccountBalance(result.data);\n        }\n      });\n\n      TradsStore.getAccountBalances('solr', ['btc', 'usdt'], (result) => {\n        if (result.code === 200 || result.code === 201) {\n          this.processSolrAccountBalance(result.data);\n        }\n      });\n    }\n\n    // 处理 websocket 消息\n    onWebSocketMessage(message, topic) {\n\n      if (topic === this.state.theTopicsDef.timer) {\n        this.setState({\n          ...this.state,\n          serverTimer: moment(message).format('YYYY-MM-DD HH:mm:ss')\n        })\n        return;\n      }\n\n      if (topic === this.state.theTopicsDef.orderbook) {\n        let _message=JSON.parse(message);\n        this.setState({\n          ...this.state,\n          orderbook: {\n            symbol: _message.symbol,\n            asks: JSON.parse(_message['asks']),\n            bids: JSON.parse(_message['bids'])\n          }\n        });\n        return;\n      }\n\n      if (topic === this.state.theTopicsDef.pricing) {\n        this.setState({\n          ...this.state,\n          oanda: JSON.parse(message)\n        });\n        return;\n      }\n\n      if (topic === this.state.theTopicsDef.diskorders) {\n        let _diskorders = this.processDiskOrders(JSON.parse(message));\n        this.setState({\n          ...this.state,\n          diskorders: _diskorders\n        });\n        return;\n      }\n\n      if (topic === this.state.theTopicsDef.accountBalance) {\n        let _accountBalance = JSON.parse(message);\n        let _balanceList = _accountBalance.list;\n        let accountDiskBalance = this.state.accountDiskBalance;\n        let accountSolrBalance = this.state.accountSolrBalance;\n        for (let b of _balanceList) {\n          let _currency = b.currency;\n          if (_accountBalance.type === 'disk') {\n            accountDiskBalance[_currency] = b.balance;\n          }\n          if (_accountBalance.type === 'solr') {\n            accountSolrBalance[_currency] = b.balance;\n          }\n        }\n        this.setState({\n          ...this.state,\n          accountDiskBalance: accountDiskBalance,\n          accountSolrBalance: accountSolrBalance\n        });\n        return;\n      }\n\n      if (topic === this.state.theTopicsDef.diskAccount) {\n        let _accountBalance = JSON.parse(message);\n        this.processDiskAccountBalance(_accountBalance);\n        return;\n      }\n\n      if (topic === this.state.theTopicsDef.solrAccount) {\n        let _accountBalance = JSON.parse(message);\n        this.processSolrAccountBalance(_accountBalance);\n        return;\n      }\n\n      if (topic === this.state.theTopicsDef.revokeorder) {\n        let _revokeCount = JSON.parse(message);\n        let _diskorders = this.state.diskorders;\n        for (const [key, value] of Object.entries(_revokeCount)) {\n          if (!_diskorders || _diskorders.length === 0) {\n            continue;\n          }\n          for (let order of _diskorders) {\n            if (order.orderId === key) {\n              order.revokeCount = value;\n            }\n          }\n        }\n        this.setState({\n          ...this.state,\n          revokeCount: _revokeCount,\n          diskorders: _diskorders\n        });\n        return;\n      }\n\n      if (topic === this.state.theTopicsDef.httplog) {\n        let _httpnetworkLogger = message;\n        let _speed = _httpnetworkLogger.speed;\n        let _max = this.state.httpNetworkLogger.max;\n        let _min = this.state.httpNetworkLogger.min;\n        let _items = this.state.httpNetworkLogger.items;\n        _items.push(_httpnetworkLogger);\n        //console.log(_httpnetworkLogger, '_httpnetworkLogger');\n        if (_max < _httpnetworkLogger.speed) {\n          _max = _httpnetworkLogger.speed;\n        }\n        if (_min === 0 || _speed < _min) {\n          _min = _speed;\n        } \n        this.setState({\n          ...this.state,\n          httpNetworkLogger: {\n            speed: _speed,\n            max: _max,\n            min: _min,\n            items: _items.slice(_items.length > 15 ? _items.length - 15 : 0)\n          }\n        });\n        return;\n      }\n\n      console.log(message, topic);\n    }\n\n    processDiskOrders(diskorders) {\n      let _diskorders = [];\n      for (const [key, value] of Object.entries(diskorders)) {\n        let distOrderParam = JSON.parse(value)['distOrderParam'];\n        _diskorders.push({\n          pick: distOrderParam.pick,\n          orderId: key,\n          side: distOrderParam.side,\n          symbol: distOrderParam.symbol,\n          amount: parseFloat(distOrderParam.amount),\n          price: parseFloat(distOrderParam.price),\n          revokeCount: 0\n        });\n      }\n      return _l.orderBy(_diskorders, ['pick'],['asc']);\n    }\n\n    getOrderBookAsksSection() {\n      return (\n            this.state.orderbook.asks.map((item, i) => {\n              return <li key={i}>{item[0]} - {item[1]}</li>;\n            })\n        );\n    }\n\n    getOrderBookBidsSection() {\n      return (\n            this.state.orderbook.bids.map((item, i) => {\n              return <li key={i}>{item[0]} - {item[1]}</li>;\n            })\n        );\n    }\n\n    getDiskOrdersAsksSection() {\n      return (\n            this.state.diskorders.filter(f => f.side === 'SELL' ).map((item, i) => {\n              return <li key={i}>[{item['revokeCount']}/{item['pick']}]-{item['orderId']} - {item['price']} - {item['amount']}</li>;\n            })\n        );\n    }\n\n    getDiskOrdersBidsSection() {\n      return (\n            this.state.diskorders.filter(f => f.side === 'BUY' ).map((item, i) => {\n              return <li key={i}>{item['price']} - {item['amount']} - {item['orderId']}-[{item['revokeCount']}/{item['pick']}] </li>;\n            })\n        );\n    }\n\n    getHttpNetworkSection() {\n      return (\n        this.state.httpNetworkLogger.items.map((m, i) => {\n          return <div key={i}> \n            <span className=\"time\">{ moment(m.start).format('HH:mm:ss.SSS') }</span>\n            <span className=\"speed\">{ m.speed }</span>\n            <span className=\"method\">{ m.method.toUpperCase() }</span>\n            <span className=\"url\">{ m.URL }</span> </div>;\n        })\n      );\n    }\n\n    render() {\n      const { httpNetworkLogger, accountDiskBalancesBTC, accountDiskBalancesJPY, accountSolrBalancesBTC, accountSolrBalancesUSDT } = this.state;\n      return (\n        <div className={`${this.props.className} IndexPage`}>\n          <h2 id=\"server_time\" style={{color: 'crimson', fontWeight: 'bold', textAlign: 'center'}}>{ this.state.serverTimer }</h2>\n          { this.state.httpNetworkLogger && <div className=\"top-section\">\n              <div className=\"httpNetwork-logger\">\n                <h3 className=\"httpnetwork-speed\">HttpNetwork Interceptor: 当前-<span>{httpNetworkLogger.speed}</span>, 最高-<span>{httpNetworkLogger.max}</span>, 最低-<span>{httpNetworkLogger.min}</span></h3>\n                <div className=\"httpNetwork-logger-items\">\n                  {this.state.httpNetworkLogger && this.getHttpNetworkSection()}\n                </div>\n              </div>\n            </div>\n          }\n          <div className=\"top-section\">\n            <div className=\"oanda\">\n              <h3>Oanda - { this.state.oanda && this.state.oanda.instrument }</h3>\n              <h3>卖: <span>{ this.state.oanda && this.state.oanda.sell }</span></h3>\n              <h3>买: <span>{ this.state.oanda && this.state.oanda.buy }</span></h3>\n            </div>\n            <div className=\"balance account-balance\">\n              <h3>Disk Account Balance</h3>\n              { accountDiskBalancesBTC && <ul> \n                  <li>BTC: {accountDiskBalancesBTC.tradeBalance } / {accountDiskBalancesBTC.frozenBalance } / {accountDiskBalancesBTC.rate }</li>\n                  <li>JPY: {accountDiskBalancesJPY.tradeBalance } / {accountDiskBalancesJPY.frozenBalance } / {accountDiskBalancesJPY.rate }</li>\n                </ul> }\n            </div>\n            <div className=\"balance account-balance\">\n              <h3>Solr Account Balance</h3>\n              { accountSolrBalancesBTC && <ul> \n                  <li>BTC: {accountSolrBalancesBTC.tradeBalance } / {accountSolrBalancesBTC.frozenBalance } / {accountSolrBalancesBTC.rate }</li>\n                  <li>USDT: {accountSolrBalancesUSDT.tradeBalance } / {accountSolrBalancesUSDT.frozenBalance } / {accountSolrBalancesUSDT.rate }</li>\n                </ul> }\n            </div>\n            <div className=\"clear\"></div>\n          </div>\n          <div className=\"orderbook\">\n            <h3>OrderBook - { this.state.orderbook && this.state.orderbook.symbol }</h3>\n            <div className=\"asks\">\n              <h3>卖</h3>\n              { this.state.orderbook && <ul> { this.getOrderBookAsksSection() }</ul> }\n            </div>\n            <div className=\"bids\">\n              <h3>买</h3>\n              { this.state.orderbook && <ul> { this.getOrderBookBidsSection() }</ul> }\n            </div>\n            <div className=\"clear\"></div>\n          </div>\n          <div className=\"diskorders\">\n            <h3>diskorders - { this.state.diskorders && this.state.diskorders.length > 0 && this.state.diskorders[0].symbol } - { this.state.diskorders && this.state.diskorders.length }</h3>\n            <div className=\"asks\">\n              <h3>卖</h3>\n              { this.state.diskorders && <ul> { this.getDiskOrdersAsksSection() }</ul> }\n            </div>\n            <div className=\"bids\">\n              <h3>买</h3>\n              { this.state.diskorders && <ul> { this.getDiskOrdersBidsSection() }</ul> }\n            </div>\n            <div className=\"clear\"></div>\n          </div>\n          <div className=\"clear\"></div>\n          <div>\n            <SockJsClient url='/_sockjs' topics={this.state.theTopics || []}\n                          onMessage={(msg, _topic) => { this.onWebSocketMessage(msg, _topic); }}\n                          ref={ (client) => { this.clientRef = client }} />\n          </div>\n        </div>\n      );\n    }\n\n}\n\nlet mixin = css`&{\n  .clear {\n    clear: both;\n    float: none;\n  }\n  .orderbook {\n    float:left;\n  }\n  .orderbook .asks {\n    background-color:cornflowerblue;\n  }\n  .orderbook .bids {\n    background-color:aliceblue;\n  }\n  .orderbook .asks, .orderbook .bids {\n    font-size: 0.625em;\n    float:left;\n  }\n  .orderbook .asks ul, .orderbook .bids ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n  }\n\n  .diskorders, .httpnetwork {\n    float:left;\n  }\n  .diskorders .asks {\n    background-color:burlywood;\n  }\n  .diskorders .bids {\n    background-color:antiquewhite;\n  }\n  .diskorders .asks, .diskorders .bids {\n    font-size: 0.625em;\n    float:left;\n  }\n  .diskorders .asks ul, .diskorders .bids ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n  }\n\n  .top-section .balance {\n    margin-left: 1em;\n  }\n  .top-section .balance ul {\n    font-size: 1.15em;\n    font-weight: bold;\n  }\n  .top-section .balance ul li {\n    width: 285px;\n  }\n  .top-section .account-balance ul li {\n    width: 585px;\n  }\n  .top-section .solr-balance ul li {\n    width: 385px;\n  }\n  .top-section .oanda, .top-section .balance {\n    float: left;\n  }\n  .top-section .oanda ul, .top-section .balance ul, .httpnetwork ul {\n    list-style: none;\n    margin: 0;\n    padding: 0;\n  }\n\n  .httpnetwork ul {\n    font-size: .625em;\n  }\n\n  .httpnetwork-speed span {\n    width: 55px;\n    display: inline-block;\n  }\n  .httpNetwork-logger-items {\n    font-size: .625em;\n    background-color: blue;\n    color: white;\n  }\n  .httpNetwork-logger-items span {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    display: inline-block;\n    display: inline-block;\n  }\n  .httpNetwork-logger-items span.time {\n    width: 75px;\n    text-align: right;\n  }\n  .httpNetwork-logger-items span.speed {\n    width: 28px;\n    text-align: right;\n  }\n  .httpNetwork-logger-items span.method {\n    width: 40px;\n    text-align: right;    \n    margin-right: 7px;\n  }\n  .httpNetwork-logger-items span.url {\n    width: 650px;\n  }\n}`;\n\nconst IndexPage = styled(_IndexPage)`\n    ${mixin}\n`;\n\nexport default IndexPage;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\n\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\n\nimport IndexPage from \"__pages/index/IndexPage\";\n\n\nconst SliderComponent = () => (\n    <Switch>\n        <Route exact path={['/', '/index']} component={ IndexPage } />\n    </Switch>\n)\n\nReactDOM.render(\n    <Router>\n        <SliderComponent />\n    </Router>,\n     document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}